# This defines a server block, which represents a single virtual server in NGINX.
# A server block handles requests based on its configuration (e.g., domain, ports, etc.).
server {
    # Specifies that the server listens on port 443 for HTTPS traffic.
    listen 443 ssl;

    # Defines the domain name or IP address that this server block will respond to.
    server_name example.com;

    # SSL configuration
    # Specifies the paths to your SSL certificate and private key files.
    ssl_certificate /etc/ssl/certs/example.com.crt;
    ssl_certificate_key /etc/ssl/private/example.com.key;

    # SSL protocol and settings to ensure strong security.
    ssl_protocols TLSv1.2 TLSv1.3; # Use only secure protocols
    ssl_prefer_server_ciphers on;  # Prefer server-defined ciphers
    ssl_ciphers HIGH:!aNULL:!MD5;  # Use strong ciphers

    # This defines a location block, which applies to requests with a path starting with /.
    # Since / matches all paths, it applies to all requests not explicitly handled by other location blocks.
    location / {
        # Load balancing setup: Forward requests to a group of backend servers.
        # `upstream` block (defined below) contains the list of backend servers.
        proxy_pass http://backend_servers;

        # Sets the Host header of the forwarded request to the original Host sent by the client.
        proxy_set_header Host $host;

        # These headers forward the client’s original IP address to the backend:
        # X-Real-IP: Contains the client’s actual IP.
        # X-Forwarded-For: Includes the client’s IP and any intermediary proxies the request passed through.
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Sends the protocol (http or https) used by the client in the X-Forwarded-Proto header.
        proxy_set_header X-Forwarded-Proto $scheme;

        # Sets the timeout for establishing a connection to the backend server.
        proxy_connect_timeout 60s;

        # Timeout for sending a request to the backend and for receiving a response.
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Prevents caching of responses when the Upgrade header is present (e.g., for WebSocket connections).
        proxy_cache_bypass $http_upgrade;

        # Enables support for WebSockets and other protocols requiring persistent connections.
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Specifies custom error pages:
    # 404: Returns /404.html when a resource is not found.
    # 500, 502, 503, 504: Returns /50x.html for server-side errors.
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    # Specifies that /50x.html is served from /usr/share/nginx/html, which is the default NGINX directory for static files.
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# This server block listens on port 80 to redirect HTTP traffic to HTTPS.
server {
    listen 80;

    # Define the server name for which this block applies.
    server_name example.com;

    # Redirect all HTTP requests to HTTPS (port 443).
    return 301 https://$host$request_uri;
}

# Define an upstream block for load balancing between multiple backend servers.
upstream backend_servers {
    # List of backend servers with their respective IPs or hostnames and ports.
    server backend1.example.com:5000;
    server backend2.example.com:5000;
    server backend3.example.com:5000;

    # Optional: Enable load balancing methods
    # By default, NGINX uses round-robin (even distribution) for load balancing.

    # Least connections method: Forward requests to the server with the least number of active connections.
    # least_conn;

    # IP hash method: Forward requests based on client IP, ensuring session persistence.
    # ip_hash;

    # Optionally define health checks to exclude unhealthy servers.
}
